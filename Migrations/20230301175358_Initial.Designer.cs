// <auto-generated />
using System;
using Clinic_IndividualWork_KazanovAlexandr.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Clinic_IndividualWork_KazanovAlexandr.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230301175358_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Clinic_IndividualWork_KazanovAlexandr.Models.ClinicDepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int")
                        .HasColumnName("DoctorID");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("ClinicDepartment_PK");

                    b.ToTable("ClinicDepartment");
                });

            modelBuilder.Entity("Clinic_IndividualWork_KazanovAlexandr.Models.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<int?>("ClinicDepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PositionId")
                        .HasColumnType("int")
                        .HasColumnName("PositionID");

                    b.Property<string>("SecondName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("Doctor_PK");

                    b.HasIndex("ClinicDepartmentId");

                    b.HasIndex("PositionId");

                    b.ToTable("Doctor");
                });

            modelBuilder.Entity("Clinic_IndividualWork_KazanovAlexandr.Models.OutpatientCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DoctorId")
                        .HasColumnType("int")
                        .HasColumnName("DoctorID");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<string>("TreatmentPlan")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("OutpatientCard_PK");

                    b.ToTable("OutpatientCard");
                });

            modelBuilder.Entity("Clinic_IndividualWork_KazanovAlexandr.Models.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Complaints")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OutpatientCardId")
                        .HasColumnType("int")
                        .HasColumnName("OutpatientCardID");

                    b.Property<string>("SecondName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("Patient_PK");

                    b.HasIndex("OutpatientCardId");

                    b.ToTable("Patient");
                });

            modelBuilder.Entity("Clinic_IndividualWork_KazanovAlexandr.Models.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Salary")
                        .HasColumnType("float");

                    b.HasKey("Id")
                        .HasName("Position_PK");

                    b.ToTable("Position");
                });

            modelBuilder.Entity("Clinic_IndividualWork_KazanovAlexandr.Models.Doctor", b =>
                {
                    b.HasOne("Clinic_IndividualWork_KazanovAlexandr.Models.ClinicDepartment", null)
                        .WithMany("Doctors")
                        .HasForeignKey("ClinicDepartmentId");

                    b.HasOne("Clinic_IndividualWork_KazanovAlexandr.Models.OutpatientCard", "OutpatientCard")
                        .WithMany("Doctor")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Doctor_OutpatientCard");

                    b.HasOne("Clinic_IndividualWork_KazanovAlexandr.Models.Position", "Position")
                        .WithMany("Doctor")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Doctor_Position");

                    b.Navigation("OutpatientCard");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("Clinic_IndividualWork_KazanovAlexandr.Models.Patient", b =>
                {
                    b.HasOne("Clinic_IndividualWork_KazanovAlexandr.Models.OutpatientCard", "OutpatientCard")
                        .WithMany("Patient")
                        .HasForeignKey("OutpatientCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Patient_OutpatientCard");

                    b.Navigation("OutpatientCard");
                });

            modelBuilder.Entity("Clinic_IndividualWork_KazanovAlexandr.Models.ClinicDepartment", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("Clinic_IndividualWork_KazanovAlexandr.Models.OutpatientCard", b =>
                {
                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Clinic_IndividualWork_KazanovAlexandr.Models.Position", b =>
                {
                    b.Navigation("Doctor");
                });
#pragma warning restore 612, 618
        }
    }
}
